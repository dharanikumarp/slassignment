{"version":3,"sources":["Auth.js","Urls.js","NavBar/NavBar.js","SecuredRoute/SecuredRoute.js","Streams/Streams.js","VideoPlayer/YoutubePlayer.js","Chat/Title.js","Chat/MessageList.js","Chat/SenderInput.js","Chat/Chat.js","Stats/UserStats.js","Stats/RollingTimeStatsTable.js","Stream/Stream.js","Users/UserTable.js","Messages/Messages.js","Stats/AllUserStats.js","Stats/AllUserAndStreamStats.js","App.js","serviceWorker.js","index.js"],"names":["AUTH_CLIENT","Auth","Object","classCallCheck","this","getProfile","bind","handleAuthentication","signOut","isAuthenticated","response","console","log","idToken","tokenId","accessToken","profile","profileObj","LOGIN","withRouter","props","googleResponse","fetch","method","mode","cache","headers","Content-Type","body","JSON","stringify","then","resp","ok","history","replace","react_default","a","createElement","className","Link","to","google_login","clientId","buttonText","onSuccess","onFailure","scope","name","onLogoutSuccess","getAccessToken","Component","component","path","Route","render","Streams","_this","possibleConstructorReturn","getPrototypeOf","call","state","streams","options","Authorization","getIdToken","json","_this2","setState","liveStreams","map","stream","key","videoId","pathname","alt","src","thumbnails","default","url","channelTitle","title","description","YoutubePlayer","videoURL","frameBorder","width","height","Title","MessageList","el","scrollTop","scrollHeight","breakWordStyle","overflowWrap","ref","messages","message","time","profileImageUrl","style","SenderInput","handleSubmit","msg","length","onNewMessageInput","type","onChange","e","target","value","onKeyDown","onClick","Chat","Fragment","Chat_Title","Chat_MessageList","Chat_SenderInput","UserStats","userStats","es","columns","Header","accessor","sortable","data","defaultPageSize","pageSize","minRows","RollingTimeStatsTable","rollingStats","showPagination","Stream","handleNewUserMessage","newMessage","ws","readyState","OPEN","googleUserId","gmail","sender","liveChatId","send","warn","sendHeartBeat","location","googleId","email","imageUrl","numMessagesPerSecond","interval","freq","WebSocket","onopen","setInterval","onmessage","evt","received","parse","concat","toConsumableArray","filter","find","rollingSummary","close","clearInterval","VideoPlayer_YoutubePlayer","channelId","src_Chat_Chat","Stats_RollingTimeStatsTable","Stats_UserStats","UserTable","users","Messages","filterable","d","Date","toLocaleString","id","AllUserStats","AllUserAndStreamStats","streamStats","ping","Stats_AllUserStats","App","NavBar_NavBar","textAlign","verticalAlign","SecuredRoute_SecuredRoute","exact","Boolean","window","hostname","match","ReactDOM","BrowserRouter","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.db369fa2.chunk.js","sourcesContent":["class Auth {\n    constructor() {\n        \n        this.getProfile = this.getProfile.bind(this);\n        this.handleAuthentication = this.handleAuthentication.bind(this);\n        this.signOut = this.signOut.bind(this);\n        this.isAuthenticated = this.isAuthenticated.bind(this);\n    }\n\n    handleAuthentication(response) {\n        console.log('handleAuthentication ', response);\n        this.idToken = response.tokenId;\n        this.accessToken = response.accessToken;\n        this.profile = response.profileObj;\n    }\n\n    signOut() {\n        this.idToken = null;\n        this.accessToken = null;\n        this.profile = null;\n    }\n\n    getProfile() {\n        return this.profile;\n    }\n\n    getIdToken() {\n        return this.idToken;\n    }\n\n    getAccessToken() {\n        return this.accessToken;\n    }\n\n    isAuthenticated() {\n        return this.idToken != null;\n    }\n}\n\nconst AUTH_CLIENT = new Auth();\n\nexport default AUTH_CLIENT;","export const LOGIN = 'http://localhost:9000/login';\nexport const STREAMS ='http://localhost:9000/streams';\nexport const MESSAGES = 'http://localhost:9000/messages';\nexport const USERS = 'http://localhost:9000/users';\nexport const WS_CHAT = 'ws://localhost:9000/chat';\nexport const WS_STATS = 'ws://localhost:9000/stats';\n","import React from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport {GoogleLogin, GoogleLogout} from 'react-google-login';\nimport AUTH_CLIENT from '../Auth';\nimport {LOGIN} from '../Urls';\n\n\nfunction NavBar(props) {\n\n    const signOut = () => {\n        fetch('https://accounts.google.com/o/oauth2/revoke?token=' + AUTH_CLIENT.getAccessToken()).then((resp) => {\n            AUTH_CLIENT.signOut();\n            props.history.replace('/');\n        });\n    };\n\n    const googleResponse = (response) => {\n        console.log('response ', response);\n    \n        fetch(LOGIN, {\n          method: 'POST',\n          mode: 'cors',\n          cache: 'no-cache',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n\t\t'idToken': response.tokenId,\n\t\t'accessToken': response.accessToken\n\t\t})\n        }).then((resp) => {\n          if(resp.ok) {\n            AUTH_CLIENT.handleAuthentication(response);\n            console.log('Id Token verified by server');\n            props.history.replace('/streams');\n           }\n        })\n        \n    };\n\n    const SCOPES ='https://www.googleapis.com/auth/youtube https://www.googleapis.com/auth/youtube.force-ssl https://www.googleapis.com/auth/youtube.readonly https://www.googleapis.com/auth/youtube.upload https://www.googleapis.com/auth/youtubepartner https://www.googleapis.com/auth/youtubepartner-channel-audit profile email ';\n  \n    return (\n        <nav className='navbar navbar-dark bg-primary fixed-top'>\n            <Link className='navbar-brand' to='/'>\n                StreamViewer\n            </Link>\n\n            {\n                AUTH_CLIENT.isAuthenticated() && \n                <div>\n                    <Link className='navbar-brand' to='/streams'>Live Streams</Link>\n                    <Link className='navbar-brand' to='/users'>Users</Link>\n                    <Link className='navbar-brand' to='/stats'>Statistics</Link>\n                    <Link className='navbar-brand' to='/messages'>Messages</Link>\n                </div>\n                \n            }\n            {\n                !AUTH_CLIENT.isAuthenticated() &&\n                \n                <GoogleLogin clientId='450677404358-luoq4fsgakvfq482n0j3fbhtd93ne0ve.apps.googleusercontent.com' buttonText='Login with Google' onSuccess={googleResponse} \n                onFailure={googleResponse} scope={SCOPES}/>\n                \n            }\n            {\n                \n                AUTH_CLIENT.isAuthenticated() &&\n                <div>\n                    <label className='mr-2 text-white'>{AUTH_CLIENT.getProfile().name}</label>\n                \n                    <GoogleLogout buttonText=\"Logout\"\n                        onLogoutSuccess={signOut}>\n                    </GoogleLogout>\n                </div>\n            }\n        </nav>\n    );\n}\n\nexport default withRouter(NavBar);\n","import React from 'react';\nimport {Route, withRouter} from 'react-router-dom';\nimport AUTH_CLIENT from '../Auth';\n\nfunction SecuredRoute(props) {\n    const {component: Component, path} = props;\n    return (\n        <Route path={path} render={() => {\n\n            if(!AUTH_CLIENT.isAuthenticated()) {\n                props.history.replace('/');\n                return <div></div>\n            }\n\n            return <Component />\n        }} />\n    );\n}\n\nexport default withRouter(SecuredRoute);","import React, { Component } from 'react';\nimport {Link, withRouter } from 'react-router-dom';\nimport AUTH_CLIENT from '../Auth';\nimport {STREAMS} from '../Urls';\n\nclass Streams extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { streams: null};\n    }\n\n    async componentDidMount() {\n        let options = { \n            method: 'POST',\n            mode: 'cors',\n            cache: 'no-cache',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + AUTH_CLIENT.getIdToken()\n            },\n            body: JSON.stringify({\n                idToken: AUTH_CLIENT.getIdToken(),\n                accessToken: AUTH_CLIENT.getAccessToken()\n\t\t    })\n        };\n\n        await fetch(STREAMS, options).then((response) => {return response.json()}).then((json) => {\n            this.setState({streams: json.liveStreams});\n        })\n    }\n\n    render() {\n        return (\n            <div className='container'>\n                <div className='row'>\n                    { \n                        this.state.streams === null && <p>Fetching Live Streams...</p>\n                    }\n\n                    {\n                        this.state.streams && this.state.streams.map(stream => (\n\n                            <div key={stream.videoId} className='col-sm-12 col-md-4 col-lg-3'>\n                                <Link to={{\n                                    pathname: '/stream',\n                                    state: {\n                                        stream: stream\n                                    }\n                                }}>\n                                    <div className='card text-white bg-success mb-3'>\n                                        <img className='card-img-top' alt='Video thumbnail url' src={stream.thumbnails.default.url}/>\n                                        <div className='card-header'>Channel: {stream.channelTitle}</div>\n                                        <div className='card-body'>\n                                            <h4 className='card-title'>{stream.title}</h4>\n                                            <p className='card-text'>{stream.description}</p>\n                                        </div>\n                                    </div>\n                                </Link>\n                            </div>    \n                        ))\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(Streams);\n","import React from 'react';\nimport './YoutubePlayer.css';\n\nfunction YoutubePlayer(props) {\n    console.log('props ', props);\n    //const videoURL = 'https://www.youtube.com/embed/?channel=' + props.channelId;\n    const videoURL = 'https://www.youtube.com/embed/' + props.videoId;\n    //const videoStyle = {'width': '100%', 'height': 'auto'};\n    console.log('videoURL ' + videoURL);\n    return (\n        <div className='iframe-container'>\n            <iframe src={videoURL} frameBorder='0' width='560' height='349' title='Live streaming'></iframe>\n        </div>\n    );\n}\n\nexport default YoutubePlayer;","import React from 'react';\n\n\nfunction Title(props) {\n    return <p className='text-primary'>{props.videoId}</p>\n}\n\nexport default Title;","import React, { Component } from 'react';\nimport './messagelist.css';\n\nclass MessageList extends Component {\n\n    componentDidUpdate() {\n        //this.el.scrollIntoView({ behavior: 'smooth' });\n        this.el.scrollTop = this.el.scrollHeight;\n    }\n\n    render() {\n        let breakWordStyle = {overflowWrap: 'break-word'}\n        return (\n            <div className='chat-messages panel panel-default' ref={el => { this.el = el; }}>                 \n                {this.props.messages.map(message => {\n                return (\n                    <div key={message.time} className='message-container'>\n                        <img src={message.profileImageUrl} alt='avatar' width='40px' height='40px'/>\n                        <span style={breakWordStyle}>{message.message}</span>\n                    </div>\n                )\n             })}\n                {/*<div style={{ float:\"left\", clear: \"both\" }}\n                    ref={(el) => { this.messagesEnd = el; }}>\n                </div>\n            */}\n           </div>\n        )\n    }\n}\n\nexport default MessageList;","import React, { Component } from 'react';\n\nclass SenderInput extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {message: ''};\n    }\n\n    handleSubmit = () => {\n         console.log('handleSubmit');\n         let msg = this.state.message;\n         if(msg.length) {\n            this.setState({message: ''});\n            this.props.onNewMessageInput(msg);\n         }\n    }\n\n    render() {\n        return(\n            <div>\n                <input type='text' onChange={e => this.setState({message: e.target.value})}\n                    onKeyDown={e => { if(e.key === 'Enter') this.handleSubmit(); }} \n                    value={this.state.message} />\n                <button className='btn btn-primary' onClick={this.handleSubmit}>Send</button>\n            </div>\n        );\n    }\n}\n\nexport default SenderInput;","import React, { Component } from 'react';\n\nimport Title from './Title';\nimport MessageList from './MessageList';\nimport SenderInput from './SenderInput';\n\nclass Chat extends Component {\n\n    render() {\n        return (\n            <React.Fragment>\n                <Title videoId={this.props.videoId}/>\n                <MessageList messages={this.props.messages}/>\n                <SenderInput onNewMessageInput={this.props.onNewMessageInput}/>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Chat;","import React from 'react';\nimport ReactTable from \"react-table\";\nimport \"react-table/react-table.css\";\n\nfunction UserStats(props) {\n\n    const columns = [\n        {\n            Header: 'Name',\n            accessor: 'sender',\n            sortable: true\n        },\n        {\n            Header: 'Email',\n            accessor: 'gmail',\n            sortable: true,\n        },\n        {\n            Header: 'Number of Messages',\n            accessor: 'numMessages',\n            sortable: true\n        }\n\n    ];\n    return (\n        <div>\n            <p>User Activity in Live Stream</p>\n            {\n                props.userStats.length === 0 &&\n                'Loading User Activity statistics...'\n            }\n            {\n                props.userStats.length > 0 && \n                <ReactTable columns={columns} data={props.userStats} defaultPageSize={5} pageSize={5} minRows={5}/>\n            }\n        </div>\n    );\n}\n\nexport default UserStats;","import React from 'react';\nimport ReactTable from \"react-table\";\nimport \"react-table/react-table.css\";\n\nfunction RollingTimeStatsTable(props) {\n\n    const columns = [\n        {\n            Header: 'Interval',\n            accessor: 'interval',\n            sortable: true\n        },\n        {\n            Header: 'Frequency',\n            accessor: 'freq',\n            sortable: true,\n        }\n    ];\n\n    return(\n        <div>\n            <p>Rolling Time Summary of Chat Frequency</p>\n            {\n                props.rollingStats.length === 0 &&\n                'Loading Rolling statistics...'\n            }\n            {\n                props.rollingStats.length > 0 && \n                <ReactTable columns={columns} data={props.rollingStats}  showPagination={false} defaultPageSize={5} minRows={5}/>\n            }\n        </div>\n    );\n}\n\nexport default RollingTimeStatsTable;","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport YoutubePlayer from '../VideoPlayer/YoutubePlayer';\nimport Chat from '../Chat/Chat';\nimport AUTH_CLIENT from '../Auth';\nimport UserStats from '../Stats/UserStats';\nimport RollingTimeStatsTable from '../Stats/RollingTimeStatsTable';\nimport {WS_CHAT} from '../Urls';\n\nclass Stream extends Component {\n\n    constructor(props) {\n        super(props);\n        const { stream } = this.props.location.state;\n        console.log('selected stream ',stream);\n        \n        this.state = {\n            sender: AUTH_CLIENT.getProfile().name,\n            googleUserId: AUTH_CLIENT.getProfile().googleId,\n            gmail: AUTH_CLIENT.getProfile().email,\n            videoId: stream.videoId,\n            profileImageUrl: AUTH_CLIENT.getProfile().imageUrl,\n            messages: [],\n            stream: stream,\n            title: stream.title,\n            description: stream.description,\n            numMessagesPerSecond: 0,\n            userStats: [],\n            rollingStats: [\n                {interval: 'One Second', freq: 'loading...'},\n                {interval: 'Five Seconds', freq: 'loading...'},\n                {interval: 'Ten Seconds', freq: 'loading...'},\n                {interval: 'Thirty Seconds', freq: 'loading...'},\n                {interval: 'One Minute', freq: 'loading...'}\n            ],\n        };\n    }\n    \n    componentDidMount() {\n        const { stream } = this.props.location.state;\n        this.setState({stream: stream});\n        this.setState({videoId: stream.videoId});\n        \n        this.ws = new WebSocket(WS_CHAT);\n        this.ws.onopen = () => {\n            console.log('onOpen event handler', this.ws.readyState);\n            \n            if(this.ws.readyState === this.ws.OPEN) {\n                let message = {\n                    type: 'join',\n                    googleUserId: this.state.googleUserId,\n                    gmail: this.state.gmail,\n                    videoId: this.state.videoId,\n                    sender: this.state.sender,\n                    profileImageUrl: this.state.profileImageUrl,\n                    title: this.state.title,\n                    description: this.state.description,\n                    liveChatId: this.state.stream.liveChatId \n                };\n                this.ws.send(JSON.stringify(message));\n            }\n            setInterval(this.sendHeartBeat, 10000);\n        };\n        \n        this.ws.onmessage = (evt) => {\n          let received = JSON.parse(evt.data);\n    \n          console.log('received ', received);\n          if(received.type === 'message') {\n            console.log('received ', received);\n            if(received.videoId === this.state.videoId) {\n              this.setState({messages: [...this.state.messages, received]});\n            }\n          } else if(received.type === 'heartbeat') {\n            \n          } else if(received.type === 'history') {\n              console.log('type is history');\n              if(received.history && received.history.length > 0) {\n                console.log('history ', received.history);\n                this.setState({messages: [...this.state.messages, ...received.history]});  \n              }\n          } else if(received.type === 'stats') {\n            let userStats = received.userStats.filter(e => e.videoId === this.state.videoId);\n            if(userStats.length) {\n                this.setState({userStats: userStats});\n            }\n\n            //let stats = received.stats.find(e => e.videoId === this.state.videoId);\n            //this.setState({numMessagesPerSecond: stats.numMessages});\n\n            let rollingStats = received.rollingStats.find(e => e.videoId === this.state.videoId)\n            if(rollingStats) {\n                let rollingSummary = rollingStats.rollingSummary;\n                this.setState({rollingStats: [\n                    {interval: 'One Second', freq: '' + rollingSummary[0]},\n                    {interval: 'Five Seconds', freq: '' + rollingSummary[1]},\n                    {interval: 'Ten Seconds', freq: '' + rollingSummary[2]},\n                    {interval: 'Thirty Seconds', freq: '' + rollingSummary[3]},\n                    {interval: 'One Minute', freq: '' + rollingSummary[4]}\n               ]});\n            }\n            \n            \n          }\n        };\n      }\n\n    componentWillUnmount() {\n        console.log('Stream.componentWillUnmount()');\n        this.ws.close();\n        clearInterval(this.sendHeartBeat);\n    }\n\n    handleNewUserMessage = (newMessage) => {\n        \n        if(this.ws.readyState === this.ws.OPEN) {\n            // Now send the message throught the backend API\n            let message = {\n                type: 'message',\n                googleUserId: this.state.googleUserId,\n                gmail: this.state.gmail,\n                videoId: this.state.videoId,\n                message: newMessage,\n                sender: this.state.sender,\n                title: this.state.title,\n                description: this.state.description,\n                profileImageUrl: this.state.profileImageUrl,\n                liveChatId: this.state.stream.liveChatId,\n                accessToken: AUTH_CLIENT.getAccessToken()\n            };\n            this.ws.send(JSON.stringify(message));\n        } else {\n            console.warn('Websocket is still connecting, ignoring message');\n        }\n    }\n\n    sendHeartBeat = () => {\n        if(this.ws.readyState === this.ws.OPEN) {\n          let message = {\n            'type': 'heartbeat',\n            'sender': this.state.sender\n          };\n          this.ws.send(JSON.stringify(message));\n        }\n    }\n\n    render() {\n        return (\n            <div className='container container-fluid'>\n                <div className='row'>\n                    <div className='col-sm-12 col-md-6 col-lg-6'>\n                        <YoutubePlayer channelId={this.state.stream.channelId} \n                        videoId={this.state.stream.videoId}/>\n                    </div>\n                    <div className='col-sm-12 col-md-6 col-lg-6'>\n                        <Chat videoId={this.state.title} messages={this.state.messages} onNewMessageInput={this.handleNewUserMessage}/>\n                    </div>\n                </div>\n                <div className='row mt-5'>\n                    {/*<RollingAverage numMessages={this.state.numMessagesPerSecond}/>*/}\n                    <div className='col-sm-12 col-md-6 col-lg-6'>\n                        <RollingTimeStatsTable rollingStats={this.state.rollingStats}/>\n                    </div>\n\n                    <div className='col-sm-12 col-md-6 col-lg-6'>\n                        <UserStats userStats={this.state.userStats}/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(Stream);\n","import React, { Component } from 'react';\nimport ReactTable from \"react-table\";\nimport \"react-table/react-table.css\";\nimport AUTH_CLIENT from '../Auth';\nimport { withRouter } from 'react-router-dom';\nimport { USERS } from '../Urls';\n\nclass UserTable extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            users: []\n        };\n    }\n    \n    async componentDidMount() {\n        const options = { \n            method: 'POST',\n            mode: 'cors',\n            cache: 'no-cache',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + AUTH_CLIENT.getIdToken()\n            },\n            body: JSON.stringify({\n                idToken: AUTH_CLIENT.getIdToken(),\n                accessToken: AUTH_CLIENT.getAccessToken()\n\t\t    })\n        };\n\n        await fetch(USERS, options).then((response) => {return response.json()}).then((json) => {\n            this.setState({users: json});\n        });\n    }\n\n    render() {\n        const columns = [\n            {\n                Header: 'Name',\n                accessor: 'name',\n                sortable: true\n            },\n            {\n                Header: 'Given Name',\n                accessor: 'givenName',\n                sortable: true\n            },\n            {\n                Header: 'Email Address',\n                accessor: 'email',\n                sortable: true\n            }\n        ];\n\n        return(\n            <div>\n                <p>Registered users in our system</p>\n            {\n                this.state.users.length === 0 && 'Loading Users...'\n            }\n            {\n                this.state.users.length > 0 &&\n                <ReactTable columns={columns} data={this.state.users} defaultPageSize={5}/>\n            }\n            </div>\n        );\n    }\n}\n\nexport default withRouter(UserTable);","import React, { Component } from 'react';\nimport ReactTable from \"react-table\";\nimport \"react-table/react-table.css\";\nimport AUTH_CLIENT from '../Auth';\nimport { withRouter } from 'react-router-dom';\nimport { MESSAGES } from '../Urls';\n\nclass Messages extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {messages: []};\n    }\n\n    async componentDidMount() {\n        const options = { \n            method: 'POST',\n            mode: 'cors',\n            cache: 'no-cache',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + AUTH_CLIENT.getIdToken()\n            },\n            body: JSON.stringify({\n                idToken: AUTH_CLIENT.getIdToken(),\n                accessToken: AUTH_CLIENT.getAccessToken()\n\t\t    })\n        };\n\n        await fetch(MESSAGES, options).then((response) => {return response.json()}).then((json) => {\n            this.setState({messages: json});\n        });\n    }\n\n    render() {\n\n        const columns = [\n            {\n                Header: 'Name',\n                accessor: 'sender',\n                sortable: true,\n                filterable: true\n            },\n            {\n                Header: 'Email Address',\n                accessor: 'gmail',\n                sortable: true,\n                filterable: true\n            },\n            {\n                Header: 'Stream Title',\n                accessor: 'title',\n                sortable: true,\n                filterable: true      \n            },\n            {\n                Header: 'Message',\n                accessor: 'message',\n                sortable: false,\n                filterable: true\n            },\n            {\n                Header: 'Date/Time',\n                accessor: d => { return new Date(d.time).toLocaleString()},\n                sortable: true,\n                filterable: true,\n                id: 'time'\n            }\n\n        ];\n\n        return (\n            <div>\n                <p className='text-primary'>Persisted messages in our system. Use the textboxes below the table header to search and filter results.</p>\n                {\n                    this.state.messages.length === 0 && 'Loading messages...'\n                }\n                {\n                    this.state.messages.length > 0 &&\n                    <ReactTable columns={columns} data={this.state.messages} defaultPageSize={10}/>\n                }\n            </div>\n        );\n    }\n}\n\nexport default withRouter(Messages);","import React from 'react';\nimport ReactTable from \"react-table\";\nimport \"react-table/react-table.css\";\n\nfunction AllUserStats(props) {\n\n    const columns = [\n        {\n            Header: 'Name',\n            accessor: 'sender',\n            sortable: true\n        },\n        {\n            Header: 'Email Address',\n            accessor: 'gmail',\n            sortable: true,\n        },\n        {\n            Header: 'Total Messages',\n            accessor: 'totalMessages',\n            sortable: true\n        },\n        {\n            Header: 'Most Active Stream',\n            accessor: 'mostActiveVideo',\n            sortable: true,\n        },\n        {\n            Header: 'Most Active Stream - Num Messages',\n            accessor: 'mostActiveVideoNumMsgs',\n            sortable: true\n        }\n    ];\n    return(\n        <div>\n            <p className='text-primary'>User Statistics</p>\n            {\n                props.userStats.length === 0 && 'Loading User Stats...'\n            }\n            {\n                props.userStats.length > 0 &&\n                <ReactTable columns={columns} data={props.userStats} defaultPageSize={5}/>\n            }\n        </div>\n    );\n}\n\nexport default AllUserStats;","import React, { Component } from 'react';\nimport {withRouter} from 'react-router-dom';\nimport AllUserStats from './AllUserStats';\n\nimport { WS_STATS } from '../Urls';\n\nclass AllUserAndStreamStats extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            userStats: [],\n            streamStats: []\n        };\n    }\n\n    componentDidMount() {\n        this.ws = new WebSocket(WS_STATS);\n        this.ws.onopen = () => {\n            this.ws.send(JSON.stringify({ping: 'test'}))\n        };\n        \n        this.ws.onmessage = (evt) => {\n            let received = JSON.parse(evt.data);\n            this.setState({userStats: received});\n        }\n    }\n\n    componentWillUnmount() {\n        console.log('AllUserAndStreamStats.componentWillUnmount()');\n        this.ws.close();\n    }\n    \n    render() {\n        return (\n            <AllUserStats userStats={this.state.userStats}/>\n        );\n    }\n}\n\nexport default withRouter(AllUserAndStreamStats);","import React, { Component } from 'react';\nimport NavBar from './NavBar/NavBar';\nimport AUTH_CLIENT from './Auth';\nimport SecuredRoute from './SecuredRoute/SecuredRoute';\nimport Streams from './Streams/Streams';\nimport Stream from './Stream/Stream';\nimport UserTable from './Users/UserTable';\nimport Messages from './Messages/Messages';\nimport AllUserAndStreamStats from './Stats/AllUserAndStreamStats';\n\nclass App extends Component {\n  render() {\n               \n    return (\n      <div>\n        <NavBar/>\n        {!AUTH_CLIENT.isAuthenticated() &&\n          <p style={{textAlign: 'center', verticalAlign: 'middle'}}>\n          Welcome to StreamViewer - StreamLabs coding assignment demo to live stream with chat<br/>\n          Sign-in with your Google/Youtube account to view the live streams in owned and subscribed channels.\n        </p>\n        }\n        <SecuredRoute exact path='/streams' component={Streams}/>\n        <SecuredRoute exact path='/stream' component={Stream}/>\n        <SecuredRoute exact path='/users' component={UserTable}/>\n        <SecuredRoute exact path='/stats' component={AllUserAndStreamStats}/>\n        <SecuredRoute exact path='/messages' component={Messages}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App/>\n    </BrowserRouter>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}